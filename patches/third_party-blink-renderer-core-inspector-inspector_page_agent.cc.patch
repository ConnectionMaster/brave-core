diff --git a/third_party/blink/renderer/core/inspector/inspector_page_agent.cc b/third_party/blink/renderer/core/inspector/inspector_page_agent.cc
index 98229c0fc7ff5c86fe0da4d20936cbcfe90c9720..0130fc2cfacb22aa2633c83560c858232b785f7f 100644
--- a/third_party/blink/renderer/core/inspector/inspector_page_agent.cc
+++ b/third_party/blink/renderer/core/inspector/inspector_page_agent.cc
@@ -83,6 +83,8 @@
 #include "third_party/blink/renderer/platform/wtf/vector.h"
 #include "v8/include/v8-inspector.h"
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+
 namespace blink {
 
 using protocol::Response;
@@ -858,7 +860,7 @@ void InspectorPageAgent::DidClearDocumentOfWindowObject(LocalFrame* frame) {
     const String world_name = worlds_to_evaluate_on_load_.Get(key);
     if (world_name.IsEmpty()) {
       frame->GetScriptController().ExecuteScriptInMainWorld(
-          source, ScriptSourceLocationType::kUnknown,
+          source, ScriptSourceLocationType::kInspector,
           ScriptController::kExecuteScriptWhenScriptsDisabled);
       continue;
     }
@@ -872,12 +874,14 @@ void InspectorPageAgent::DidClearDocumentOfWindowObject(LocalFrame* frame) {
     // a foreign world.
     v8::HandleScope handle_scope(V8PerIsolateData::MainThreadIsolate());
     frame->GetScriptController().ExecuteScriptInIsolatedWorld(
-        world->GetWorldId(), source, KURL(), SanitizeScriptErrors::kSanitize);
+        world->GetWorldId(),
+        ScriptSourceCode(source, ScriptSourceLocationType::kInspector), KURL(),
+        SanitizeScriptErrors::kSanitize);
   }
 
   if (!script_to_evaluate_on_load_once_.IsEmpty()) {
     frame->GetScriptController().ExecuteScriptInMainWorld(
-        script_to_evaluate_on_load_once_, ScriptSourceLocationType::kUnknown,
+        script_to_evaluate_on_load_once_, ScriptSourceLocationType::kInspector,
         ScriptController::kExecuteScriptWhenScriptsDisabled);
   }
 }
@@ -941,9 +945,27 @@ void InspectorPageAgent::FrameRequestedNavigation(
     Frame* target_frame,
     const KURL& url,
     ClientNavigationReason reason) {
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  if (target_frame->IsMainFrame()) { // probably not right once remote frames have PG support
+    LocalFrame* main_frame = inspected_frames_->Root();
+    if (main_frame) {
+      Document* document = main_frame->GetDocument();
+      if (document) {
+        ::brave_page_graph::PageGraph* const page_graph = document->GetPageGraph();
+        if (page_graph) {
+              std::string graphml(page_graph->ToGraphML());
+              GetFrontend()->finalPageGraph(String::FromUTF8(graphml.c_str()));
+        }
+      }
+    }
+  }
+#endif
+  using ReasonEnum =
+      protocol::Page::FrameScheduledNavigationNotification::ReasonEnum;
   GetFrontend()->frameRequestedNavigation(
       IdentifiersFactory::FrameId(target_frame),
-      ClientNavigationReasonToProtocol(reason), url.GetString());
+      (reason == ClientNavigationReason::kNone) ? ReasonEnum::Reload : ClientNavigationReasonToProtocol(reason), // work around missing code in our snapshot of upstream Chromium
+      url.GetString());
 }
 
 void InspectorPageAgent::FrameScheduledNavigation(
@@ -951,9 +973,12 @@ void InspectorPageAgent::FrameScheduledNavigation(
     const KURL& url,
     base::TimeDelta delay,
     ClientNavigationReason reason) {
+  using ReasonEnum =
+      protocol::Page::FrameScheduledNavigationNotification::ReasonEnum;
   GetFrontend()->frameScheduledNavigation(
       IdentifiersFactory::FrameId(frame), delay.InSecondsF(),
-      ClientNavigationReasonToProtocol(reason), url.GetString());
+      (reason == ClientNavigationReason::kNone) ? ReasonEnum::Reload : ClientNavigationReasonToProtocol(reason), // work around missing code in our snapshot of upstream Chromium
+      url.GetString());
 }
 
 void InspectorPageAgent::FrameClearedScheduledNavigation(LocalFrame* frame) {
@@ -1380,6 +1405,29 @@ Response InspectorPageAgent::setInterceptFileChooserDialog(bool enabled) {
   return Response::OK();
 }
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+Response InspectorPageAgent::generatePageGraph(String* data) {
+  LocalFrame* main_frame = inspected_frames_->Root();
+  if (!main_frame) {
+    return Response::Error("No main frame found");
+  }
+
+  Document* document = main_frame->GetDocument();
+  if (!document) {
+    return Response::Error("No Document instance to generate page graph for");
+  }
+
+  ::brave_page_graph::PageGraph* const page_graph = document->GetPageGraph();
+  if (!page_graph) {
+    return Response::Error("No Page Graph for this Document");
+  }
+
+  std::string graphml(page_graph->ToGraphML());
+  *data = String::FromUTF8(graphml.c_str());
+  return Response::OK();
+}
+#endif
+
 Response InspectorPageAgent::generateTestReport(const String& message,
                                                 Maybe<String> group) {
   Document* document = inspected_frames_->Root()->GetDocument();
